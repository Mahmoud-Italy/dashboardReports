{"remainingRequest":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/src/components/layouts/Header.vue?vue&type=template&id=146e2983&scoped=true&","dependencies":[{"path":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/src/components/layouts/Header.vue","mtime":1595609668000},{"path":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/work/amr/cors.hrs.com/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}