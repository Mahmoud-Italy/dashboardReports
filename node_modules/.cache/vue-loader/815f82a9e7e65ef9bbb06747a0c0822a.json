{"remainingRequest":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/Sites/dlc/multitenancy/dashboard/src/components/layouts/Header.vue?vue&type=template&id=146e2983&","dependencies":[{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/src/components/layouts/Header.vue","mtime":1596540997000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}