{"remainingRequest":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/Sites/dlc/multitenancy/dashboard/src/components/layouts/Header.vue?vue&type=template&id=146e2983&","dependencies":[{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/src/components/layouts/Header.vue","mtime":1598772723000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7fSwgWwogICAgX2MoImhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlciIgfSwgWwogICAgICBfdm0uX20oMCksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidS1oZWFkZXItbWlkZGxlIiB9LCBbCiAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICJ1LWhlYWRlci1zZWN0aW9uIGp1c3RpZnktY29udGVudC1zbS1zdGFydCBmbGV4LWdyb3ctMSBweS0wIgogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWFyY2giLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgImRhdGEtc2VhcmNoLW1vYmlsZS1pbnZva2VyIjogIiNoZWFkZXJTZWFyY2hNb2JpbGVJbnZva2VyIiwKICAgICAgICAgICAgICAgICAgImRhdGEtc2VhcmNoLXRhcmdldCI6ICIjaGVhZGVyU2VhcmNoIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWFyY2gtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJoZWFkZXJTZWFyY2giIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInctMTAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25TZWFyY2goJGV2ZW50KQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbnB1dC1ncm91cCBoLTEwMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNlYXJjaCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VhcmNoIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wgdS1oZWFkZXItc2VhcmNoX19maWVsZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJUeXBlIHRvIHNlYXJjaOKApiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnNlYXJjaCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zZWFyY2ggPSAkZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWN0aW9uIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1kcm9wZG93biBkcm9wZG93biBwdC0xIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInUtaGVhZGVyLWludm9rZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiB7IG5hbWU6ICJpbmJveCIgfSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1yZWxhdGl2ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aS1lbWFpbCB1LWhlYWRlci1pbnZva2VyX19pY29uIgogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWN0aW9uIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1kcm9wZG93biBkcm9wZG93biBwdC0xIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInUtaGVhZGVyLWludm9rZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiB7IG5hbWU6ICJsb2dzIiB9IH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInBvc2l0aW9uLXJlbGF0aXZlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRpLWJydXNoLWFsdCB1LWhlYWRlci1pbnZva2VyX19pY29uIgogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWN0aW9uIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1kcm9wZG93biBkcm9wZG93biBwdC0xIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInUtaGVhZGVyLWludm9rZXIgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiB7IG5hbWU6ICJzZXR0aW5ncyIgfSB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1yZWxhdGl2ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aS1sYXlvdXQtZ3JpZDIgdS1oZWFkZXItaW52b2tlcl9faWNvbiIKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidS1oZWFkZXItc2VjdGlvbiB1LWhlYWRlci1zZWN0aW9uLS1wcm9maWxlIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInUtaGVhZGVyLWRyb3Bkb3duIGRyb3Bkb3duIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGluay1tdXRlZCBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiIyIsCiAgICAgICAgICAgICAgICAgICAgcm9sZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgaWQ6ICJ1c2VyUHJvZmlsZUludm9rZXIiLAogICAgICAgICAgICAgICAgICAgICJhcmlhLWhhc3BvcHVwIjogInRydWUiLAogICAgICAgICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAiZGF0YS10b2dnbGUiOiAiZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgICJkYXRhLW9mZnNldCI6ICIwIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgInUtaGVhZGVyLWF2YXRhciBpbWctZmx1aWQgcm91bmRlZC1jaXJjbGUgbXItbWQtMyIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogIi9hc3NldHMvaW1nL2RlZmF1bHRfYXZhdGFyLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJVc2VyIFByb2ZpbGUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAidGV4dC1kYXJrIGQtbm9uZSBkLW1kLWlubGluZS1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLmF1dGgudXNlcl9uYW1lKSArICIgIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aS1hbmdsZS1kb3duIHRleHQtbXV0ZWQgbWwtNCIKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAidS1oZWFkZXItZHJvcGRvd25fX21lbnUgZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImFyaWEtbGFiZWxsZWRieSI6ICJ1c2VyUHJvZmlsZUludm9rZXIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBwLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSBwLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0LXVuc3R5bGVkIG1iLTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGluay1kYXJrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImVkaXQtdXNlcnMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgaWQ6IF92bS5hdXRoLnVzZXJfaWQgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVXBkYXRlIFByb2ZpbGUgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaW5rLWRhcmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDo7IiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmxvZ291dCB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTG9nb3V0IildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidS1oZWFkZXItbGVmdCIgfSwgWwogICAgICBfYygKICAgICAgICAiYSIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInUtaGVhZGVyLWxvZ28iLCBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDo7IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1sb2dvX19pY29uIiwKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9zdmcvbG9nby1taW5pLnN2ZyIsIGFsdDogIiIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInUtaGVhZGVyLWxvZ29fX3RleHQiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL3N2Zy9sb2dvLXRleHQtbGlnaHQuc3ZnIiwgYWx0OiAiIiB9CiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1LWhlYWRlci1zZWN0aW9uIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImpzLXNpZGViYXItaW52b2tlciB1LWhlYWRlci1pbnZva2VyIHUtc2lkZWJhci1pbnZva2VyIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGhyZWY6ICJqYXZhc2NyaXB0OjsiLAogICAgICAgICAgICAiZGF0YS1pcy1jbG9zZS1hbGwtZXhjZXB0LXRoaXMiOiAidHJ1ZSIsCiAgICAgICAgICAgICJkYXRhLXRhcmdldCI6ICIjc2lkZWJhciIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAidGktYWxpZ24tbGVmdCB1LWhlYWRlci1pbnZva2VyX19pY29uIHUtc2lkZWJhci1pbnZva2VyX19pY29uLS1vcGVuIgogICAgICAgICAgfSksCiAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgInRpLWFsaWduLWp1c3RpZnkgdS1oZWFkZXItaW52b2tlcl9faWNvbiB1LXNpZGViYXItaW52b2tlcl9faWNvbi0tY2xvc2UiCiAgICAgICAgICB9KQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJhIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAidS1oZWFkZXItc2VhcmNoX19tb2JpbGUtaW52b2tlciBhbGlnbi1pdGVtcy1jZW50ZXIiLAogICAgICAgIGF0dHJzOiB7IGlkOiAiaGVhZGVyU2VhcmNoTW9iaWxlSW52b2tlciIsIGhyZWY6ICJqYXZhc2NyaXB0OjsiIH0KICAgICAgfSwKICAgICAgW19jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRpLXNlYXJjaCIgfSldCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiYnV0dG9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWxpbmsgaW5wdXQtZ3JvdXAtcHJlcGVuZCB1LWhlYWRlci1zZWFyY2hfX2J0biIsCiAgICAgICAgYXR0cnM6IHsgdHlwZTogInN1Ym1pdCIgfQogICAgICB9LAogICAgICBbX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGktc2VhcmNoIiB9KV0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}