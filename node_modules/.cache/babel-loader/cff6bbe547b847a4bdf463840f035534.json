{"remainingRequest":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/babel-loader/lib/index.js!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-json-excel/JsonExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-json-excel/JsonExcel.vue","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/Sites/dlc/multitenancy/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["JsonExcel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\t<div\r\n\t\t:id=\"idName\"\r\n\t\t@click=\"generate\">\r\n\t\t<slot>\r\n\t\t\tDownload {{name}}\r\n\t\t</slot>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nimport download from \"downloadjs\";\r\n\r\nexport default {\r\n  props: {\r\n    // mime type [xls, csv]\r\n    type: {\r\n      type: String,\r\n      default: \"xls\"\r\n    },\r\n    // Json to download\r\n    data: {\r\n      type: Array,\r\n      required: false,\r\n      default: null\r\n    },\r\n    // fields inside the Json Object that you want to export\r\n    // if no given, all the properties in the Json are exported\r\n    fields: {\r\n      type: Object,\r\n      required: false\r\n    },\r\n    // this prop is used to fix the problem with other components that use the\r\n    // variable fields, like vee-validate. exportFields works exactly like fields\r\n    exportFields: {\r\n      type: Object,\r\n      required: false\r\n    },\r\n    // Use as fallback when the row has no field values\r\n    defaultValue: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\r\n    title: {\r\n      default: null\r\n    },\r\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\r\n    footer: {\r\n      default: null\r\n    },\r\n    // filename to export\r\n    name: {\r\n      type: String,\r\n      default: \"data.xls\"\r\n    },\r\n    fetch: {\r\n      type: Function,\r\n    },\r\n    meta: {\r\n      type: Array,\r\n      default: () => []\r\n    }, \r\n    worksheet: {\r\n      type: String, \r\n      default: \"Sheet1\"\r\n    },\r\n    //event before generate was called\r\n    beforeGenerate:{\r\n      type: Function,\r\n    },\r\n    //event before download pops up\r\n    beforeFinish:{\r\n      type: Function,\r\n    },\r\n  },\r\n  computed: {\r\n    // unique identifier\r\n    idName() {\r\n      var now = new Date().getTime();\r\n      return \"export_\" + now;\r\n    },\r\n\r\n    downloadFields() {\r\n      if (this.fields !== undefined) return this.fields;\r\n\r\n      if (this.exportFields !== undefined) return this.exportFields;\r\n    }\r\n  },\r\n  methods: {\r\n    async generate() {\r\n      if(typeof this.beforeGenerate === 'function'){\r\n        await this.beforeGenerate();\r\n      }\r\n      let data = this.data;\r\n      if(typeof this.fetch === 'function' || !data)\r\n         data = await this.fetch();\r\n\r\n      if (!data || !data.length) {\r\n        return;\r\n      }\r\n\r\n      let json = this.getProcessedJson(data, this.downloadFields);\r\n      if (this.type === \"html\") {\r\n        // this is mainly for testing\r\n        return this.export(\r\n          this.jsonToXLS(json),\r\n          this.name.replace(\".xls\", \".html\"),\r\n          \"text/html\"\r\n        );\r\n      } else if (this.type === \"csv\") {\r\n        return this.export(\r\n          this.jsonToCSV(json),\r\n          this.name.replace(\".xls\", \".csv\"),\r\n          \"application/csv\"\r\n        );\r\n      }\r\n      return this.export(\r\n        this.jsonToXLS(json),\r\n        this.name,\r\n        \"application/vnd.ms-excel\"\r\n      );\r\n    },\r\n    /*\r\n\t\tUse downloadjs to generate the download link\r\n\t\t*/\r\n    export:async function(data, filename, mime) {\r\n      let blob = this.base64ToBlob(data, mime);\r\n      if(typeof this.beforeFinish === 'function')\r\n        await this.beforeFinish();\r\n      download(blob, filename, mime);\r\n    },\r\n    /*\r\n\t\tjsonToXLS\r\n\t\t---------------\r\n\t\tTransform json data into an xml document with MS Excel format, sadly\r\n\t\tit shows a prompt when it opens, that is a default behavior for\r\n\t\tMicrosoft office and cannot be avoided. It's recommended to use CSV format instead.\r\n\t\t*/\r\n    jsonToXLS(data) {\r\n      let xlsTemp =\r\n        '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\r\n      let xlsData = \"<thead>\";\r\n      const colspan = Object.keys(data[0]).length;\r\n      let _self = this;\r\n\r\n      //Header\r\n      if (this.title != null) {\r\n        xlsData += this.parseExtraData(\r\n          this.title,\r\n          '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\r\n        );\r\n      }\r\n\r\n      //Fields\r\n      xlsData += \"<tr>\";\r\n      for (let key in data[0]) {\r\n        xlsData += \"<th>\" + key + \"</th>\";\r\n      }\r\n      xlsData += \"</tr>\";\r\n      xlsData += \"</thead>\";\r\n\r\n      //Data\r\n      xlsData += \"<tbody>\";\r\n      data.map(function(item, index) {\r\n        xlsData += \"<tr>\";\r\n        for (let key in item) {\r\n          xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\r\n        }\r\n        xlsData += \"</tr>\";\r\n      });\r\n      xlsData += \"</tbody>\";\r\n\r\n      //Footer\r\n      if (this.footer != null) {\r\n        xlsData += \"<tfoot>\";\r\n        xlsData += this.parseExtraData(\r\n          this.footer,\r\n          '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\r\n        );\r\n        xlsData += \"</tfoot>\";\r\n      }\r\n\r\n      return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\r\n    },\r\n    /*\r\n\t\tjsonToCSV\r\n\t\t---------------\r\n\t\tTransform json data into an CSV file.\r\n\t\t*/\r\n    jsonToCSV(data) {\r\n      var csvData = [];\r\n      //Header\r\n      if (this.title != null) {\r\n        csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\r\n      }\r\n      //Fields\r\n      for (let key in data[0]) {\r\n        csvData.push(key);\r\n        csvData.push(\",\");\r\n      }\r\n      csvData.pop();\r\n      csvData.push(\"\\r\\n\");\r\n      //Data\r\n      data.map(function(item) {\r\n        for (let key in item) {\r\n          let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\r\n          if (escapedCSV.match(/[,\"\\n]/)) {\r\n            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\r\n          }\r\n          csvData.push(escapedCSV);\r\n          csvData.push(\",\");\r\n        }\r\n        csvData.pop();\r\n        csvData.push(\"\\r\\n\");\r\n      });\r\n      //Footer\r\n      if (this.footer != null) {\r\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\r\n      }\r\n      return csvData.join(\"\");\r\n    },\r\n    /*\r\n\t\tgetProcessedJson\r\n\t\t---------------\r\n\t\tGet only the data to export, if no fields are set return all the data\r\n\t\t*/\r\n    getProcessedJson(data, header) {\r\n      let keys = this.getKeys(data, header);\r\n      let newData = [];\r\n      let _self = this;\r\n      data.map(function(item, index) {\r\n        let newItem = {};\r\n        for (let label in keys) {\r\n          let property = keys[label];\r\n          newItem[label] = _self.getValue(property, item);\r\n        }\r\n        newData.push(newItem);\r\n      });\r\n\r\n      return newData;\r\n    },\r\n    getKeys(data, header) {\r\n      if (header) {\r\n        return header;\r\n      }\r\n\r\n      let keys = {};\r\n      for (let key in data[0]) {\r\n        keys[key] = key;\r\n      }\r\n      return keys;\r\n    },\r\n    /*\r\n\t\tparseExtraData\r\n\t\t---------------\r\n\t\tParse title and footer attribute to the csv format\r\n\t\t*/\r\n    parseExtraData(extraData, format) {\r\n      let parseData = \"\";\r\n      if (Array.isArray(extraData)) {\r\n        for (var i = 0; i < extraData.length; i++) {\r\n          parseData += format.replace(\"${data}\", extraData[i]);\r\n        }\r\n      } else {\r\n        parseData += format.replace(\"${data}\", extraData);\r\n      }\r\n      return parseData;\r\n    },\r\n\r\n    getValue(key, item) {\r\n      const field = typeof key   !== \"object\" ? key : key.field;\r\n      let indexes = typeof field !== \"string\" ? []  : field.split(\".\");\r\n      let value   = this.defaultValue;\r\n    \r\n      if (!field)\r\n\t      value = item;\r\n      else if( indexes.length > 1 )\r\n        value = this.getValueFromNestedItem(item, indexes);\r\n      else\r\n        value = this.parseValue(item[field]);\r\n      \r\n      if( key.hasOwnProperty('callback'))\r\n        value = this.getValueFromCallback(value, key.callback);\r\n      \r\n      return value;\r\n    },\r\n\r\n    /*\r\n    convert values with newline \\n characters into <br/>\r\n    */\r\n    valueReformattedForMultilines(value) {\r\n      if (typeof(value)==\"string\") return(value.replace(/\\n/ig,\"<br/>\"));\r\n      else return(value);\r\n    },\r\n\r\n    getValueFromNestedItem(item, indexes){\r\n      let nestedItem = item;\r\n      for (let index of indexes) {\r\n        if(nestedItem)\r\n          nestedItem = nestedItem[index];\r\n      }\r\n      return this.parseValue(nestedItem);\r\n    },\r\n\r\n    getValueFromCallback(item, callback){\r\n      if(typeof callback !== \"function\")\r\n        return this.defaultValue\r\n      const value = callback(item);\r\n      return this.parseValue(value);\r\n    },\r\n    parseValue(value){\r\n      return value || value === 0 || typeof value === 'boolean'\r\n          ? value\r\n          : this.defaultValue;\r\n    },\r\n    base64ToBlob(data, mime) {\r\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\r\n      let bstr = atob(base64);\r\n      let n = bstr.length;\r\n      let u8arr = new Uint8ClampedArray(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      return new Blob([u8arr], { type: mime });\r\n    }\r\n  } // end methods\r\n};\r\n</script>\r\n"],"sourceRoot":"node_modules/vue-json-excel"}]}